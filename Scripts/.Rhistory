dfTax_ref_gen <- data.frame(getTaxonomy(unique(ref_gen$species_taxid),taxDB))
dfTax_ref_gen$taxid <- as.numeric(gsub(" ","",row.names(dfTax_ref_gen)))
ref_gen <- merge(ref_gen,dfTax_ref_gen,by.x="species_taxid",by.y="taxid",all=T)
View(dfTax_ref_gen)
View(ref_gen)
View(dfTax_ref_gen)
#Filter for species present among the PHIbase and DEFRA pathogens
ref_gen_match <- ref_gen %>%
dplyr::filter(species %in% c(df_name_ID$species))
View(ref_gen_match)
View(df_name_ID)
View(ref_gen_match)
print(ref_gen_match$refseq_category)
print(ref_gen$refseq_category)
print(ref_gen$refseq_category).unique()
print(unique(ref_gen$refseq_category))
print(unique(gen_bank$refseq_category))
print(unique(gen_bank$refseq_category))
print(unique(ref_gen$refseq_category))
print(unique(gen_bank$assembly_level))
print(unique(ref_gen$assembly_level))
print(unique(ref_seq$assembly_level))
print(unique(gen_bank$assembly_level))
print(unique(genbank$assembly_level))
print(unique(genbank$refseq_category))
print(unique(ref_gen_match$release_type))
print(unique(ref_gen_match$genome_rep))
View(df_name_ID)
pwd
setwd("/Volumes/9742f7cc-c169-405d-bf27-cd520e26f0be/data/results/nanopore_PHIbase_analysis_scripts/Scripts")
output_dir <- "/Volumes/9/9742f7cc-c169-405d-bf27-cd520e26f0be/scratch/MARMOT_Output/test"
risk_table <- "/Users/berelsom/Library/CloudStorage/OneDrive-NorwichBioScienceInstitutes/Pathogen_Database/Pathogen_Database_042025_v2/risk_table.csv"
barcode_labels <- "/Volumes/9742f7cc-c169-405d-bf27-cd520e26f0be/data/results/marmot/config/barcode_labels_23_test.tsv"
# Check if the input directory exists
if (!dir.exists(output_dir)) {
stop("Output directory does not exist: ", output_dir)
}
output_dir <- "/Volumes/MARMOT_Output/test"
stop("Output directory does not exist: ", output_dir)
output_dir <- "/Users/berelsom/Library/CloudStorage/OneDrive-NorwichBioScienceInstitutes/Air_Samples/MARMOT_Outputs/test"
risk_table <- "/Users/berelsom/Library/CloudStorage/OneDrive-NorwichBioScienceInstitutes/Pathogen_Database/Pathogen_Database_042025_v2/risk_table.csv"
barcode_labels <- "/Volumes/9742f7cc-c169-405d-bf27-cd520e26f0be/data/results/marmot/config/barcode_labels_23_test.tsv"
# Check if the input directory exists
if (!dir.exists(output_dir)) {
stop("Output directory does not exist: ", output_dir)
}
# Check if the risk table file exists & read in
if (!file.exists(risk_table)) {
stop("Risk table file does not exist: ", risk_table)
}
cat("Reading in risk table ", risk_table, "\n")
risk_table <- read_csv(risk_table)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
library(fs)  # for file path safety
library(stringr)
library(RColorBrewer)
library(viridis)
risk_table <- read_csv(risk_table)
risk_table <- read_csv(risk_table,  show_col_types = FALSE)
View(risk_table)
output_dir <- "/Users/berelsom/Library/CloudStorage/OneDrive-NorwichBioScienceInstitutes/Air_Samples/MARMOT_Outputs/test"
risk_table <- "/Users/berelsom/Library/CloudStorage/OneDrive-NorwichBioScienceInstitutes/Pathogen_Database/Pathogen_Database_042025_v2/risk_table.csv"
barcode_labels <- "/Volumes/9742f7cc-c169-405d-bf27-cd520e26f0be/data/results/marmot/config/barcode_labels_23_test.tsv"
# Check if the input directory exists
if (!dir.exists(output_dir)) {
stop("Output directory does not exist: ", output_dir)
}
# Check if the risk table file exists & read in
if (!file.exists(risk_table)) {
stop("Risk table file does not exist: ", risk_table)
}
cat("Reading in risk table ", risk_table, "\n")
risk_table <- read_csv(risk_table,  show_col_types = FALSE)
# Check if the barcode labels file exists & read in
if (!file.exists(barcode_labels)) {
stop("Barcode labels file does not exist: ", barcode_labels)
}
cat("Reading in barcode labels ", barcode_labels, "\n")
barcode_labels <- read_csv(barcode_labels, delim = "\t")
barcode_labels <- read_delim(barcode_labels, delim = "\t")
barcode_labels <-
read_delim(barcode_labels, delim = "\t",  show_col_types = FALSE))
View(barcode_labels)
barcode_labels <- "/Volumes/9742f7cc-c169-405d-bf27-cd520e26f0be/data/results/marmot/config/barcode_labels_23_test.tsv"
barcode_labels <-
read_delim(barcode_labels, delim = "\t",  show_col_types = FALSE)
barcode_labels$Barcode <- as.character(barcode_labels$Barcode)
View(barcode_labels)
# Construct output directory path
graph_save_path <- path(output_dir, "Graphs")
# Check and create the graph output directory if it doesn't exist
if (!dir.exists(graph_save_path)) {
dir.create(graph_save_path, recursive = TRUE)
}
# Function to read input files
read_input_file <- function(filename, output_dir, delim = "\t") {
readr::read_delim(fs::path(output_dir, filename),
delim = delim, show_col_types = FALSE)
}
# Read all required files, these were created in the write_files.sh script
lcaparse_perread <- read_input_file("lcaparse_perread.txt", output_dir)
genome_coverage <- read_input_file("genome_coverage_all.txt", output_dir)
read_numbers     <- read_input_file("read_numbers.tsv", output_dir)
# Convert Barcode columns to character for consistency
lcaparse_perread$Barcode <- as.character(lcaparse_perread$Barcode)
read_numbers$Barcode <- as.character(read_numbers$Barcode)
genome_coverage$Barcode <- as.character(genome_coverage$Barcode)
# Set plotting theme
custom_theme <- theme_minimal(base_size = 10) +
theme(
axis.line.x = element_line(color = "black", linewidth = 0.3),
axis.line.y = element_line(color = "black", linewidth = 0.3),
panel.grid.minor = element_blank(),
strip.text = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Risk data ------
# Filter out viruses as their species names aren't correct
risk_table <- risk_table %>%
filter(Type_of_pest != ("Virus or Viroid"))
# Look at the risk data - see how many species are present more than once
risk_counts <- risk_table %>%
count(Species, sort = TRUE) %>%
filter(n > 1)
# Collapsing to have one species per row, taking the max value of each
# If there are 5 strains of a Bacteria we are assuming worst case scenario
collapsed_risk_table <- risk_table %>%
group_by(Species) %>%
summarise(
Regulation = paste(
unique(na.omit(Regulation)),
collapse = ";"
),
Likelihood_unmitigated = if (all(is.na(Likelihood_unmitigated))) NA_real_
else max(Likelihood_unmitigated, na.rm = TRUE),
Impact_unmitigated = if (all(is.na(Impact_unmitigated))) NA_real_
else max(Impact_unmitigated, na.rm = TRUE),
Risk_Rating_unmitigated = if (all(is.na(Risk_Rating_unmitigated))) NA_real_
else max(Risk_Rating_unmitigated, na.rm = TRUE),
Likelihood_mitigated = if (all(is.na(Likelihood_mitigated))) NA_real_
else max(Likelihood_mitigated, na.rm = TRUE),
Impact_mitigated = if (all(is.na(Impact_mitigated))) NA_real_
else max(Impact_mitigated, na.rm = TRUE),
Risk_Rating_mitigated = if (all(is.na(Risk_Rating_mitigated))) NA_real_
else max(Risk_Rating_mitigated, na.rm = TRUE),
Regulated = if_else(
any(Regulated == "Yes", na.rm = TRUE),
"Yes",
"No"
),
Natural_Spread = if_else(
any(Natural_Spread == "Yes", na.rm = TRUE),
"Yes",
"No"
),
UK = if (length(unique(na.omit(UK))) == 1)
unique(na.omit(UK))
else "N/A",
.groups = "drop"
)
# Make anything below species level species instead e.g. subspecies to species
# This does not handle species group / complex
lcaparse_perread <- lcaparse_perread %>%
mutate(
Species = case_when(
Taxon_Rank == "subspecies" ~ str_extract(Taxon_Name, "^[^ ]+\\s[^ ]+(-[^ ]+)?"),
TRUE ~ Taxon_Name
)
)
# Summarise and filter the file to have one row per species per barcode
# Lose the taxonID in this step as it is complicated by the combined subspecies
lcaparse <- lcaparse_perread %>%
group_by(Barcode, Species) %>%
summarise(
Taxon_Name = first(Taxon_Name),
Taxon_Rank = first(Taxon_Rank),
Read_Count = n_distinct(Read_ID),
Taxon_ID = first(Taxon_ID),
Avg_Mean_Identity = mean(Mean_Identity, na.rm = TRUE),
.groups = "drop"
)
# merge read numbers & lcaparse on Barcode
read_numbers <- read_numbers %>%
rename(TotalReadCount = Read_Count)
lcaparse <- lcaparse %>%
left_join(read_numbers, by = "Barcode")
source("/Volumes/9742f7cc-c169-405d-bf27-cd520e26f0be/data/results/nanopore_PHIbase_analysis_scripts/Scripts/create_risk_plots.R")
for (y in y_cols) {
for (sc in scales_options) {
genus_summary <- genus_summary %>% left_join(barcode_labels, by = "Barcode")
# Create the plot
p <- ggplot(genus_summary, aes(x = Barcode_Label, y = .data[[y]], fill = Genus)) +
geom_bar(stat = "identity") +
facet_wrap(~ Genus, scales = sc, ncol = 3) +
scale_fill_manual(values = pathogen_colours) +
labs(
title = paste("Pathogen Abundance by Genus (", y, ", ", sc, ")", sep = ""),
x = "Sample ID",
y = "Reads per 100,000",
fill = "Genus"
) +
scale_y_continuous(expand = c(0, 0), limits = if (sc == "fixed") c(0, NA) else NULL) +
custom_theme +
theme(legend.position = "none")
# Construct filename and path
filename <- paste0("facet_pathogen_", y, "_", sc, ".svg")
save_path <- fs::path(pathogen_dir, filename)
# Save
ggsave(save_path, p, width = 16, height = 8)
cat("Facet plot saved: ", save_path, "\n")
}
}
genus_summary <- genus_summary %>% left_join(barcode_labels, by = "Barcode")
View(genus_summary)
# Create every possible combination of each Barcode with each genus in target_genera
genus_summary <- expand_grid(
Barcode = all_barcodes,
Genus = target_genera
) %>%
# Then join to real data
left_join(genus_summary_all, by = c("Barcode", "Genus")) %>%
mutate(Read_Count = replace_na(Read_Count, 0)) # replacing NA with 0
# Add TotalReadCount and FilterReadCount to calculate normalised values
genus_summary <- genus_summary %>%
left_join(
lcaparse %>% select(Barcode, TotalReadCount, FilterReadCount) %>% distinct(),
by = "Barcode"
) %>%
mutate(
HP100k = (Read_Count / TotalReadCount) * 100000,
Filtered_HP100k = (Read_Count / FilterReadCount) * 100000
)
genus_summary <- genus_summary %>% left_join(barcode_labels, by = "Barcode")
View(genus_summary)
# Pathogen Plots ----
pathogen_colours <- setNames(brewer.pal(9, "Set3"), target_genera)
# Create subdirectory for these to be saved into
pathogen_dir <- fs::path(graph_save_path, "pathogen_graphs")
if (!dir.exists(pathogen_dir)) {
dir.create(pathogen_dir, recursive = TRUE)
}
# Individual plot per pathogen
cat("Plotting pathogen plots... \n")
plot_pathogen_bar <- function(data,
pathogen,
y_col,
save_path,
pathogen_colours,
y_lab = "Reads per 100,000",
error_col = NULL) {
# Filter for the specified pathogen
pathogen_data <- data %>%
left_join(barcode_labels, by = "Barcode") %>%
filter(Genus == pathogen)
# Extract fill colour for this pathogen
fill_colour <- pathogen_colours[[pathogen]]
# Determine y_axis upper limit
y_max <- max(pathogen_data[[y_col]], na.rm = TRUE)
y_upper <- if (y_max == 0) 1 else NA
# Plot
p <- ggplot(pathogen_data, aes(x = Barcode_Label, y = .data[[y_col]])) +
geom_bar(stat = "identity", fill = fill_colour)
# Add error bars if specified
if (!is.null(error_col) && error_col %in% colnames(pathogen_data)) {
p <- p + geom_errorbar(
aes(
ymin = .data[[y_col]] - .data[[error_col]],
ymax = .data[[y_col]] + .data[[error_col]]
),
width = 0.3,
colour = "black"
)
}
p <- p +  labs(
title = pathogen,
x = "Sample ID",
y = y_lab
) +
scale_y_continuous(expand = c(0, 0), limits = c(0, y_upper)) +
custom_theme
ggsave(save_path, p, width = 10, height = 6)
cat("Plot saved: ", save_path, "\n")
}
#Run for the two y cols and all genera
y_cols <- c("HP100k", "Filtered_HP100k")
for (pathogen in target_genera) {
for (y in y_cols) {
filename <- paste0(pathogen, "_", y, ".svg")
save_path <- fs::path(pathogen_dir, filename)
plot_pathogen_bar(
data = genus_summary,
pathogen = pathogen,
y_col = y,
save_path = save_path,
pathogen_colours = pathogen_colours
)
}
}
pathogen_data
View(genus_summary)
plot_pathogen_bar <- function(data,
pathogen,
y_col,
save_path,
pathogen_colours,
y_lab = "Reads per 100,000",
error_col = NULL) {
# Filter for the specified pathogen
pathogen_data <- data %>%
filter(Genus == pathogen)
# Extract fill colour for this pathogen
fill_colour <- pathogen_colours[[pathogen]]
# Determine y_axis upper limit
y_max <- max(pathogen_data[[y_col]], na.rm = TRUE)
y_upper <- if (y_max == 0) 1 else NA
# Plot
p <- ggplot(pathogen_data, aes(x = Barcode_Label, y = .data[[y_col]])) +
geom_bar(stat = "identity", fill = fill_colour)
# Add error bars if specified
if (!is.null(error_col) && error_col %in% colnames(pathogen_data)) {
p <- p + geom_errorbar(
aes(
ymin = .data[[y_col]] - .data[[error_col]],
ymax = .data[[y_col]] + .data[[error_col]]
),
width = 0.3,
colour = "black"
)
}
p <- p +  labs(
title = pathogen,
x = "Sample ID",
y = y_lab
) +
scale_y_continuous(expand = c(0, 0), limits = c(0, y_upper)) +
custom_theme
ggsave(save_path, p, width = 10, height = 6)
cat("Plot saved: ", save_path, "\n")
}
#Run for the two y cols and all genera
y_cols <- c("HP100k", "Filtered_HP100k")
for (pathogen in target_genera) {
for (y in y_cols) {
filename <- paste0(pathogen, "_", y, ".svg")
save_path <- fs::path(pathogen_dir, filename)
plot_pathogen_bar(
data = genus_summary,
pathogen = pathogen,
y_col = y,
save_path = save_path,
pathogen_colours = pathogen_colours
)
}
}
# Create a single regex pattern that matches any of the genera
genera_pattern <- str_c(target_genera, collapse = "|")
# Filter the lcaparse_perread to only include the target genera
perread_target <- lcaparse_perread %>%
filter(str_detect(Taxon_Name, genera_pattern)) %>%
filter(!is.na(Taxon_ID), Taxon_ID != 0)
# Prepare unique Barcode + Taxon_ID rows with taxon metadata
# one row per barcode & taxaID
perread_taxa_unique <- perread_target %>%
group_by(Barcode, Taxon_ID, Taxon_Name, Taxon_Rank) %>%
summarise(
Mean_Identity = mean(Mean_Identity, na.rm = TRUE),
.groups = "drop"
)
# Join with genome_coverage using Barcode + taxaID
target_coverage <- genome_coverage %>%
inner_join(
perread_taxa_unique,
by = c("Barcode" = "Barcode", "taxaID" = "Taxon_ID")
)
# Summarise to get mean + standard error of coverage per Barcode × Genus
# For cases when there are multiple species within the genera
coverage_summary <- target_coverage %>%
mutate(Genus = word(Taxon_Name, 1)) %>%
group_by(Barcode, Genus) %>%
summarise(
Mean_Coverage = mean(coverage_percentage, na.rm = TRUE),
SE_Coverage = sd(coverage_percentage, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
# Expand to include missing Barcode × Genus pairs with 0 coverage
barcode_genus_grid <- expand_grid(
Barcode = unique(coverage_summary$Barcode),
Genus = target_genera
)
# Full dataset
coverage_plot_data <- barcode_genus_grid %>%
left_join(coverage_summary, by = c("Barcode", "Genus")) %>%
mutate(
Mean_Coverage = replace_na(Mean_Coverage, 0),
SE_Coverage = replace_na(SE_Coverage, 0)
)
# Merge on the labels
coverage_plot_data <- coverage_plot_data %>%
left_join(barcode_labels, by = "Barcode")
# Plot coverage of pathogens ----
cat("Plotting pathogen genome coverage plots...\n")
# Calling the earlier function
for (genus in target_genera) {
save_path <- fs::path(pathogen_dir, paste0(genus, "_genome_coverage.svg"))
# Only plot if there is data for this genus
genus_data <- coverage_plot_data %>% filter(Genus == genus)
if (nrow(genus_data) > 0 && any(!is.na(genus_data$Mean_Coverage))) {
plot_pathogen_bar(
data = coverage_plot_data,
pathogen = genus,
y_col = "Mean_Coverage",
y_lab = "Average Genome Coverage (%)",
error_col = "SE_Coverage",
save_path = save_path,
pathogen_colours = pathogen_colours
)
} else {
cat("Skipping plot for genus ", genus, " due to no data.\n")
}
}
for (sc in scales_options) {
# Fallback for zero-only data
y_max <- max(coverage_plot_data$Mean_Coverage, na.rm = TRUE)
y_upper <- if (y_max == 0) 1 else NA
# Create the plot
p <- ggplot(coverage_plot_data, aes(x = Barcode_Label, y = Mean_Coverage, fill = Genus)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = Mean_Coverage - SE_Coverage,
ymax = Mean_Coverage + SE_Coverage),
width = 0.3,
colour = "black"
) +
facet_wrap(~ Genus, scales = sc, ncol = 3) +
scale_fill_manual(values = pathogen_colours) +
scale_y_continuous(
expand = c(0, 0),
limits = if (sc == "fixed") c(0, y_upper) else NULL
) +
labs(
title = paste("Genome Coverage by Genus (", sc, " scale)", sep = ""),
x = "Barcode",
y = "Average Genome Coverage (%)",
fill = "Genus"
) +
custom_theme +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 9)
)
# Construct filename and save
filename <- paste0("facet_coverage_", sc, ".svg")
save_path <- fs::path(pathogen_dir, filename)
ggsave(save_path, p, width = 16, height = 8)
cat("Facet plot saved: ", save_path, "\n")
}
View(coverage_plot_data)
# Merge on the labels
coverage_plot_data <- coverage_plot_data %>%
left_join(barcode_labels, by = "Barcode")
# Full dataset
coverage_plot_data <- barcode_genus_grid %>%
left_join(coverage_summary, by = c("Barcode", "Genus")) %>%
mutate(
Mean_Coverage = replace_na(Mean_Coverage, 0),
SE_Coverage = replace_na(SE_Coverage, 0)
)
View(coverage_plot_data)
# Create a single regex pattern that matches any of the genera
genera_pattern <- str_c(target_genera, collapse = "|")
# Filter the lcaparse_perread to only include the target genera
perread_target <- lcaparse_perread %>%
filter(str_detect(Taxon_Name, genera_pattern)) %>%
filter(!is.na(Taxon_ID), Taxon_ID != 0)
# Prepare unique Barcode + Taxon_ID rows with taxon metadata
# one row per barcode & taxaID
perread_taxa_unique <- perread_target %>%
group_by(Barcode, Taxon_ID, Taxon_Name, Taxon_Rank) %>%
summarise(
Mean_Identity = mean(Mean_Identity, na.rm = TRUE),
.groups = "drop"
)
View(perread_taxa_unique)
# Join with genome_coverage using Barcode + taxaID
target_coverage <- genome_coverage %>%
inner_join(
perread_taxa_unique,
by = c("Barcode" = "Barcode", "taxaID" = "Taxon_ID")
)
View(target_coverage)
View(perread_target)
# Prepare unique Barcode + Taxon_ID rows with taxon metadata
# one row per barcode & taxaID
perread_taxa_unique <- perread_target %>%
group_by(Barcode, Taxon_ID, Taxon_Name, Taxon_Rank) %>%
summarise(
Mean_Identity = mean(Mean_Identity, na.rm = TRUE),
.groups = "drop"
)
View(perread_taxa_unique)
# Join with genome_coverage using Barcode + taxaID
target_coverage <- genome_coverage %>%
inner_join(
perread_taxa_unique,
by = c("Barcode" = "Barcode", "taxaID" = "Taxon_ID")
)
View(target_coverage)
View(genome_coverage)

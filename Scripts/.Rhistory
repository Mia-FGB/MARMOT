cat("Script execution started.\n")
library(optparse)
library(tidyverse)
library(taxizedb)
library(RCurl)
library(taxonomizr)
phibase <- read.csv("../Pathogen_Database_111224/phibase_4.17.csv")
View(phibase)
library(optparse)
library(tidyverse)
library(taxizedb)
library(RCurl)
library(taxonomizr)
library(jsonlite)
cat("Loading data from Risk_Register and PHIbase...\n")
#defra <- read.csv(opt$defra)
defra <- read.csv("../Pathogen_Database_Test/Risk_Register_Test.csv")
cat("DEFRA data loaded\n")
#------Don't want insect/nematode/plant/mite pests in this database
remove <-  c("Insect", "Mite", "Nematode", "Plant")
defra <- defra %>%
filter(!(Type.of.pest %in% remove))
#----Printing a list of the species names
defra_pest_name <- defra %>%
select(Pest.Name, Type.of.pest)
#----Get TaxaID from species name
defra_name_ID <- name2taxid(defra_pest_name$Pest.Name, db = "ncbi", verbose = TRUE, out_type ="summary")
defraID <- defra_name_ID %>%
select(id)
dfPhibase <- read.delim("../Pathogen_Database_Test/phibase_test.csv", sep=",", fill = TRUE)
# Filter PHIbase data on host description (potential typo in phibase)
if ("Host_description" %in% colnames(dfPhibase)) {
host_column <- "Host_description"
} else if ("Host_descripton" %in% colnames(dfPhibase)) {
host_column <- "Host_descripton"
} else {
stop("Neither 'Host_description' nor 'Host_descripton' column found in PHIbase data.")
}
keep <-  c("monocots", "eudicots", "flowering plants",
"basidiomycetes", "seed plants", "eukaryotes")
dfPhibase <- dfPhibase %>%
filter((.data[[host_column]] %in% keep))
#---------Get PHIbase species ids
dfPhibase <- dfPhibase %>%
select(Pathogen_NCBI_species_Taxonomy.ID) %>%
rename(id = Pathogen_NCBI_species_Taxonomy.ID )
dfPhibase$id <- as.numeric(dfPhibase$id)
combdf <- rbind(dfPhibase, defraID)
#Getting unique taxaIDs, and remove na values
un_combdf <- unique(combdf) %>%
na.omit(combdf$id)
#get lineage from taxaID
dfTax_db <- data.frame(getTaxonomy(unique(un_combdf$id),taxDB))
#only need to prepare database once so commented out
#prepareDatabase('accessionTaxa.sql')
taxDB <- "accessionTaxa.sql"
#get lineage from taxaID
dfTax_db <- data.frame(getTaxonomy(unique(un_combdf$id),taxDB))
#only need to prepare database once so commented out
#prepareDatabase('accessionTaxa.sql')
taxDB <- "../accessionTaxa.sql"
#get lineage from taxaID
dfTax_db <- data.frame(getTaxonomy(unique(un_combdf$id),taxDB))
#taking taxa id to own column from row name
dfTax_db$taxid <- as.numeric(gsub(" ","",row.names(dfTax_db)))
#add taxonomy to db
df_name_ID <- merge(un_combdf,dfTax_db,by.x="id",by.y="taxid",all=T)
View(df_name_ID)
refseq <- read.delim("assembly_summary_refseq.txt",header=F,sep="\t",skip=2,quote="")
refseq <- read.delim("../assembly_summary_refseq.txt",header=F,sep="\t",skip=2,quote="")
View(refseq)
colnames(refseq) <- c("assembly_accession","bioproject","biosample","wgs_master",
"refseq_category","taxid","species_taxid","organism_name","infraspecific_name",
"isolate","version_status","assembly_level","release_type","genome_rep",
"seq_rel_date","asm_name","submitter","gbrs_paired_asm","paired_asm_comp",
"ftp_path","excluded_from_refseq","relation_to_type_material","asm_not_live_date")
# Remove columns with NA names
refseq <- refseq[!is.na(names(refseq))]
genbank <- read.delim("assembly_summary_genbank.txt",header=F,sep="\t",skip=2,quote="")
genbank <- read.delim("../assembly_summary_genbank.txt",header=F,sep="\t",skip=2,quote="")
colnames(genbank) <- c(
"assembly_accession","bioproject","biosample","wgs_master",
"refseq_category","taxid","species_taxid","organism_name",
"infraspecific_name","isolate","version_status","assembly_level",
"release_type","genome_rep","seq_rel_date","asm_name","submitter",
"gbrs_paired_asm","paired_asm_comp","ftp_path","excluded_from_refseq",
"relation_to_type_material","asm_not_live_date"
)
# Remove columns with NA names
genbank <- genbank[!is.na(names(genbank))]
#Remove entries from genbank that are present in refseq to avoid redundancies
genbank <- genbank %>% dplyr::filter(!assembly_accession %in% refseq$gbrs_paired_asm)
#Merge the assembly databases
ref_gen <- rbind(refseq,genbank)
#Taxonomise with taxonomizr phylogeny
dfTax_ref_gen <- data.frame(getTaxonomy(unique(ref_gen$species_taxid),taxDB))
dfTax_ref_gen$taxid <- as.numeric(gsub(" ","",row.names(dfTax_ref_gen)))
ref_gen <- merge(ref_gen,dfTax_ref_gen,by.x="species_taxid",by.y="taxid",all=T)
View(dfTax_ref_gen)
View(ref_gen)
View(dfTax_ref_gen)
#Filter for species present among the PHIbase and DEFRA pathogens
ref_gen_match <- ref_gen %>%
dplyr::filter(species %in% c(df_name_ID$species))
View(ref_gen_match)
View(df_name_ID)
View(ref_gen_match)
print(ref_gen_match$refseq_category)
print(ref_gen$refseq_category)
print(ref_gen$refseq_category).unique()
print(unique(ref_gen$refseq_category))
print(unique(gen_bank$refseq_category))
print(unique(gen_bank$refseq_category))
print(unique(ref_gen$refseq_category))
print(unique(gen_bank$assembly_level))
print(unique(ref_gen$assembly_level))
print(unique(ref_seq$assembly_level))
print(unique(gen_bank$assembly_level))
print(unique(genbank$assembly_level))
print(unique(genbank$refseq_category))
print(unique(ref_gen_match$release_type))
print(unique(ref_gen_match$genome_rep))
View(df_name_ID)
